# import numpy
# import robustness as rob
# import attack

# attack_location  = [[(3, 3), (4, 4), (5, 5)], [(1, 1), (2, 2), (2.5, 2.5)], [(6, 6), (7, 7), (8, 8)]]
# attack_agent_v = 1
# drones_agent_location = [(0, 2), (0.5, 0.5), (3, 0)]
# obstacles_list = [[(0, 0), (1, 0), (1, 1), (0, 1)], [(2, 0),(2.5, 0),(2.5, 0.5),(2, 0.5)]]
# drones_agent_IR_dist = 2
# obstacles_list_1 = [[(28.349120433017596, 26.759133964817313), (24.42489851150203, 29.33017591339648), (27.198917456021654, 29.87144790257104), (29.83761840324763, 28.315290933694182), (31.867388362652235, 25.81190798376184), (29.905277401894452, 24.18809201623816)], [(35.994587280108256, 5.040595399188092), (35.250338294993234, 8.558863328822731), (36.87415426251692, 10.385656292286875), (38.903924221921514, 12.212449255751018), (41.27198917456022, 13.092016238159673), (44.65493910690122, 12.212449255751018), (45.87280108254398, 8.694181326116372), (44.38430311231394, 8.423545331529091), (42.963464140730714, 9.912043301759134), (44.45196211096076, 5.649526387009473), (42.48985115020297, 7.138024357239516), (41.61028416779432, 9.370771312584573), (41.81326116373478, 11.129905277401896), (39.986468200270636, 10.317997293640055), (38.56562922868741, 9.506089309878213), (37.88903924221921, 8.15290933694181), (38.768606224627874, 6.799729364005415), (39.715832205683355, 5.717185385656293), (41.40730717185386, 4.431664411366711), (40.59539918809202, 3.6874154262516896), (39.309878213802435, 3.82273342354533), (37.82138024357239, 4.228687415426251), (36.67117726657646, 4.837618403247632)], [(3.1799729364005422, 30.006765899864682), (3.2476319350473624, 34.945872801082544), (3.1799729364005422, 42.794316644113664), (3.3829499323410026, 47.733423545331526), (4.465493910690121, 48.13937753721245), (4.871447902571042, 47.19215155615697), (5.006765899864682, 29.80378890392422)], [(9.539918809201623, 18.775372124492556), (7.577807848443843, 15.257104194857916), (3.92422192151556, 10.385656292286875), (4.533152909336941, 6.732070365358595), (6.968876860622462, 3.0784844384303085), (11.163734776725303, 3.5520974289580494), (14.276048714479025, 5.514208389715833), (14.411366711772665, 10.520974289580515), (12.855209742895802, 14.309878213802435), (11.299052774018943, 16.67794316644114)], [(3.760765316854636, 5.97096177390273), (4.760765316854636, 4.97096177390273), (5.760765316854636, 5.97096177390273), (4.760765316854636, 6.97096177390273)], [(3.221443556436024, 5.627574588543078), (4.221443556436024, 4.627574588543078), (5.221443556436024, 5.627574588543078), (4.221443556436024, 6.627574588543078)]]
# obstacles_list_2 = [[(28.349120433017596, 26.759133964817313), (24.42489851150203, 29.33017591339648), (27.198917456021654, 29.87144790257104), (29.83761840324763, 28.315290933694182), (31.867388362652235, 25.81190798376184), (29.905277401894452, 24.18809201623816)], [(35.994587280108256, 5.040595399188092), (35.250338294993234, 8.558863328822731), (36.87415426251692, 10.385656292286875), (38.903924221921514, 12.212449255751018), (41.27198917456022, 13.092016238159673), (44.65493910690122, 12.212449255751018), (45.87280108254398, 8.694181326116372), (44.38430311231394, 8.423545331529091), (42.963464140730714, 9.912043301759134), (44.45196211096076, 5.649526387009473), (42.48985115020297, 7.138024357239516), (41.61028416779432, 9.370771312584573), (41.81326116373478, 11.129905277401896), (39.986468200270636, 10.317997293640055), (38.56562922868741, 9.506089309878213), (37.88903924221921, 8.15290933694181), (38.768606224627874, 6.799729364005415), (39.715832205683355, 5.717185385656293), (41.40730717185386, 4.431664411366711), (40.59539918809202, 3.6874154262516896), (39.309878213802435, 3.82273342354533), (37.82138024357239, 4.228687415426251), (36.67117726657646, 4.837618403247632)], [(3.1799729364005422, 30.006765899864682), (3.2476319350473624, 34.945872801082544), (3.1799729364005422, 42.794316644113664), (3.3829499323410026, 47.733423545331526), (4.465493910690121, 48.13937753721245), (4.871447902571042, 47.19215155615697), (5.006765899864682, 29.80378890392422)], [(9.539918809201623, 18.775372124492556), (7.577807848443843, 15.257104194857916), (3.92422192151556, 10.385656292286875), (4.533152909336941, 6.732070365358595), (6.968876860622462, 3.0784844384303085), (11.163734776725303, 3.5520974289580494), (14.276048714479025, 5.514208389715833), (14.411366711772665, 10.520974289580515), (12.855209742895802, 14.309878213802435), (11.299052774018943, 16.67794316644114)], [(3.760765316854636, 5.97096177390273), (4.760765316854636, 4.97096177390273), (5.760765316854636, 5.97096177390273), (4.760765316854636, 6.97096177390273)], [(3.0096592765331955, 4.861344847036809), (4.0096592765331955, 3.8613448470368086), (5.0096592765331955, 4.861344847036809), (4.0096592765331955, 5.861344847036809)]]
# robustness_1 = rob.rule1_prepare(drones_location, obstacles_list_1)
# robustness_2 = rob.rule1_prepare(drones_location, obstacles_list_2)
# print(robustness_1)
# print(robustness_2)
# print(rob.drone_to_obstacles_distance(drone, obstacles))
# print(rob.rule1_prepare(drone, obstacles))
# result = rob.drone_is_crush(drones_location, obstacles_list)
# print(result)
# 测试攻击策略1
# attack_agent = attack.attack_agent_location_random(attack_location, attack_agent_v)
#result = attack.attack_strategy_1(attack_location, drones_location, obstacles_list)
# print("Attack point: ", result)
# print("Attack point: ", result)
# result = attack.attack_strategy_2(attack_location, drones_agent_location, obstacles_list)
# print("攻击点为：", result)
# import scipy
# from Ablation import * 
# obstcales_list = scipy.io.loadmat('hard_obstacles.mat')
# result = ablation(50, obstacles_list, 100)
# print("攻击点为:",result)

# 读取txt文件并将每行内容作为一个数据点存储
# data_file = 'ablation_result.txt'

# # 读取文件
# with open(data_file, 'r') as file:
#     lines = file.readlines()

# # 存储数据点的列表
# points = []
# for line in lines:
#     values = line.strip().split(',')
#     numeric_values = [float(value) for value in values]  # 将每行的内容转换为浮点数
#     points.append(numeric_values)

# # 打印数据点列表
# print("Data Points:", points)

# map_size = 50
# num_points = 200
obstacles = [[] for i in range(4)]
obstacles[0] = [(28.349120433017596, 26.759133964817313), (24.42489851150203, 29.33017591339648), (27.198917456021654, 29.87144790257104), (29.83761840324763, 28.315290933694182), (31.867388362652235, 25.81190798376184), (29.905277401894452, 24.18809201623816)]

obstacles[1] = [(35.994587280108256, 5.040595399188092), (35.250338294993234, 8.558863328822731), (36.87415426251692, 10.385656292286875), (38.903924221921514, 12.212449255751018), (41.27198917456022, 13.092016238159673), (44.65493910690122, 12.212449255751018), (45.87280108254398, 8.694181326116372), (44.38430311231394, 8.423545331529091), (42.963464140730714, 9.912043301759134), (44.45196211096076, 5.649526387009473), (42.48985115020297, 7.138024357239516), (41.61028416779432, 9.370771312584573), (41.81326116373478, 11.129905277401896), (39.986468200270636, 10.317997293640055), (38.56562922868741, 9.506089309878213), (37.88903924221921, 8.15290933694181), (38.768606224627874, 6.799729364005415), (39.715832205683355, 5.717185385656293), (41.40730717185386, 4.431664411366711), (40.59539918809202, 3.6874154262516896), (39.309878213802435, 3.82273342354533), (37.82138024357239, 4.228687415426251), (36.67117726657646, 4.837618403247632)]

obstacles[2] = [(3.1799729364005422, 30.006765899864682), (3.2476319350473624, 34.945872801082544), (3.1799729364005422, 42.794316644113664), (3.3829499323410026, 47.733423545331526), (4.465493910690121, 48.13937753721245), (4.871447902571042, 47.19215155615697), (5.006765899864682, 29.80378890392422)]

obstacles[3] = [(9.539918809201623, 18.775372124492556), (7.577807848443843, 15.257104194857916), (3.92422192151556, 10.385656292286875), (4.533152909336941, 6.732070365358595), (6.968876860622462, 3.0784844384303085), (11.163734776725303, 3.5520974289580494), (14.276048714479025, 5.514208389715833), (14.411366711772665, 10.520974289580515), (12.855209742895802, 14.309878213802435), (11.299052774018943, 16.67794316644114)]

# import matplotlib.pyplot as plt

# def visualize_map(map_size, obstacles, points):
#     # 绘制地图边界
#     plt.xlim(0, map_size)
#     plt.ylim(0, map_size)

#     # 绘制障碍物
#     for obstacle in obstacles:
#         x_values = [point[0] for point in obstacle]
#         y_values = [point[1] for point in obstacle]
#         plt.plot(x_values + [x_values[0]], y_values + [y_values[0]], color='red')  # 最后一个点与起点连线，形成封闭多边形

#     # 绘制生成的点
#     x_values = [point[0] for point in points]
#     y_values = [point[1] for point in points]
#     plt.scatter(x_values, y_values, color='blue',s=10)

#     plt.show()

# # 使用函数进行可视化
# visualize_map(map_size, obstacles, points)
import matplotlib.pyplot as plt
import numpy as np
from scipy.spatial import distance
# 从txt文件中读取坐标数据
# data = np.loadtxt('ablation_points.txt', delimiter=',')  # 假设txt文件中每一行包含两个用空格或逗号分隔的数字，分别代表 x 和 y 坐标
# print(data)
# #颜色
# colors = np.loadtxt('ablation_result.txt')
# 对数据进行最小-最大缩放
# 调整颜色数据范围到新的范围，比如0.2到0.8
# new_colors = 0.2 + 0.6 * (colors - min(colors)) / (max(colors) - min(colors))
# print(new_colors)
# 提取 x 和 y 坐标
# x = data[:, 0]
# y = data[:, 1]
#  绘制障碍物
# 设置坐标轴范围从(0, 0)开始
for obstacle in obstacles:
    x_values = [point[0] for point in obstacle]
    y_values = [point[1] for point in obstacle]
    plt.plot(x_values + [x_values[0]], y_values + [y_values[0]], color='blue', linewidth=2)  # 最后一个点与起点连线，形成封闭多边形
    plt.fill(x_values, y_values, color='blue', alpha=0.5)  # 使用fill函数填充障碍物区域
# # 计算每个点到目标点（25, 25）的欧式距离
# distances = np.sqrt((x - 25) ** 2 + (y - 25) ** 2)
# print(distances)
# # 根据距离对颜色数值重新排序
# sorted_indices = np.argsort(distances)
# print(sorted_indices) 
# colors = np.sort(colors)
# print(colors)
# colors_swp = colors
# colors[sorted_indices] = colors_swp
# print(colors)
# sorted_indices_2 = np.argsort(colors)
# print(sorted_indices_2)
# 绘制彩色散点图
# plt.scatter(x, y, c=colors, s=20, alpha=0.7, cmap='coolwarm')
# plt.colorbar()  # 显示颜色条
# 保存图形为矢量格式（PDF文件）
targets = [(46.8200270635995,47.3951285520974),(1.55615696887686,48.0717185385656),(2.77401894451962,3.68741542625169),(39.9864682002706,7.47631935047362),(31.1231393775372,29.4654939106901)]
# 绘制散点图
# 定义不同的标记样式
# markers = ['o', 's', 'D', 'p', '*']
marker = 'o' 

# 绘制散点图
for i, target in enumerate(targets):
    plt.scatter(target[0], target[1], c='red', s=50, alpha=0.7, marker=marker, label=f'({target[0]:.1f}, {target[1]:.1f})')
plt.scatter(25, 25, c='black', s=50, alpha=0.7, marker='o',label=f'({25.0}, {25.0})')
# 显示自定义图例
# plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
# 调整坐标轴朝内
plt.tick_params(direction='in')

# 调整坐标轴标签字体大小和样式
plt.xticks(fontsize=8, fontname='Times New Roman')
plt.yticks(fontsize=8, fontname='Times New Roman')

# 显示自定义图例
# plt.legend(loc='right', bbox_to_anchor=(1, 0.5), prop={'size': 8, 'family': 'Times New Roman'})
# 将坐标轴起点设置为0，并设置范围
plt.gca().set_xlim([0, 50])  # 设置x轴范围从0到map_size
plt.gca().set_ylim([0, 50])  # 设置y轴范围从0到map_size
plt.gca().set_aspect('equal', adjustable='box')  # 保持坐标轴比例一致
# 设置绘图样式
# plt.style.use('ggplot')  # 使用ggplot样式
plt.savefig('A2map.svg', format='svg')
plt.show()

