import numpy as np
import random
import math
import scipy
import matplotlib.pyplot as plt
import robustness as rob
def ablation(map_size, obstacles_list, num_points):
    points = []
    min_distace = math.sqrt((map_size ** 2)/num_points)/2
    while len(points) < num_points:
        x = random.uniform(0, map_size)
        y = random.uniform(0, map_size)
        if not_too_close(x, y, points, min_distace) and not rob.drone_is_crush([(x, y)], obstacles_list):
            points.append((x, y))
    # 写入到.txt文件
    with open('Ablation_points.txt', 'w') as file:
        for point in points:
            file.write(f"{point[0]}, {point[1]}\n")

    return points

def not_too_close(x, y, points, min_distance):
    for px, py in points:
        if np.sqrt((x - px)**2 + (y - py)**2) < min_distance:
            return False
    return True 

# def not_in_obstacle(x, y, obstacles_list):
#     for obstcales in obstacles_list:
#         if (x, y) in obstcales:
#             return False
#     return True
# def not_in_obstacle(x, y, obstacles_list):
#     for obstacle in obstacles_list:
#         if any(abs(x-ox) < 0.5 and abs(y-oy) < 0.5 for ox, oy in obstacle):
#             return False
#     return True





# [(28.349120433017596, 26.759133964817313), (24.42489851150203, 29.33017591339648), (27.198917456021654, 29.87144790257104), (29.83761840324763, 28.315290933694182), (31.867388362652235, 25.81190798376184), (29.905277401894452, 24.18809201623816)]

# [(35.994587280108256, 5.040595399188092), (35.250338294993234, 8.558863328822731), (36.87415426251692, 10.385656292286875), (38.903924221921514, 12.212449255751018), (41.27198917456022, 13.092016238159673), (44.65493910690122, 12.212449255751018), (45.87280108254398, 8.694181326116372), (44.38430311231394, 8.423545331529091), (42.963464140730714, 9.912043301759134), (44.45196211096076, 5.649526387009473), (42.48985115020297, 7.138024357239516), (41.61028416779432, 9.370771312584573), (41.81326116373478, 11.129905277401896), (39.986468200270636, 10.317997293640055), (38.56562922868741, 9.506089309878213), (37.88903924221921, 8.15290933694181), (38.768606224627874, 6.799729364005415), (39.715832205683355, 5.717185385656293), (41.40730717185386, 4.431664411366711), (40.59539918809202, 3.6874154262516896), (39.309878213802435, 3.82273342354533), (37.82138024357239, 4.228687415426251), (36.67117726657646, 4.837618403247632)]

# [(3.1799729364005422, 30.006765899864682), (3.2476319350473624, 34.945872801082544), (3.1799729364005422, 42.794316644113664), (3.3829499323410026, 47.733423545331526), (4.465493910690121, 48.13937753721245), (4.871447902571042, 47.19215155615697), (5.006765899864682, 29.80378890392422)]

# [(9.539918809201623, 18.775372124492556), (7.577807848443843, 15.257104194857916), (3.92422192151556, 10.385656292286875), (4.533152909336941, 6.732070365358595), (6.968876860622462, 3.0784844384303085), (11.163734776725303, 3.5520974289580494), (14.276048714479025, 5.514208389715833), (14.411366711772665, 10.520974289580515), (12.855209742895802, 14.309878213802435), (11.299052774018943, 16.67794316644114)]

map_size = 50
num_points = 200
obstacles = [[] for i in range(4)]
obstacles[0] = [(28.349120433017596, 26.759133964817313), (24.42489851150203, 29.33017591339648), (27.198917456021654, 29.87144790257104), (29.83761840324763, 28.315290933694182), (31.867388362652235, 25.81190798376184), (29.905277401894452, 24.18809201623816)]

obstacles[1] = [(35.994587280108256, 5.040595399188092), (35.250338294993234, 8.558863328822731), (36.87415426251692, 10.385656292286875), (38.903924221921514, 12.212449255751018), (41.27198917456022, 13.092016238159673), (44.65493910690122, 12.212449255751018), (45.87280108254398, 8.694181326116372), (44.38430311231394, 8.423545331529091), (42.963464140730714, 9.912043301759134), (44.45196211096076, 5.649526387009473), (42.48985115020297, 7.138024357239516), (41.61028416779432, 9.370771312584573), (41.81326116373478, 11.129905277401896), (39.986468200270636, 10.317997293640055), (38.56562922868741, 9.506089309878213), (37.88903924221921, 8.15290933694181), (38.768606224627874, 6.799729364005415), (39.715832205683355, 5.717185385656293), (41.40730717185386, 4.431664411366711), (40.59539918809202, 3.6874154262516896), (39.309878213802435, 3.82273342354533), (37.82138024357239, 4.228687415426251), (36.67117726657646, 4.837618403247632)]

obstacles[2] = [(3.1799729364005422, 30.006765899864682), (3.2476319350473624, 34.945872801082544), (3.1799729364005422, 42.794316644113664), (3.3829499323410026, 47.733423545331526), (4.465493910690121, 48.13937753721245), (4.871447902571042, 47.19215155615697), (5.006765899864682, 29.80378890392422)]

obstacles[3] = [(9.539918809201623, 18.775372124492556), (7.577807848443843, 15.257104194857916), (3.92422192151556, 10.385656292286875), (4.533152909336941, 6.732070365358595), (6.968876860622462, 3.0784844384303085), (11.163734776725303, 3.5520974289580494), (14.276048714479025, 5.514208389715833), (14.411366711772665, 10.520974289580515), (12.855209742895802, 14.309878213802435), (11.299052774018943, 16.67794316644114)]
points = ablation(map_size, obstacles, num_points)
import matplotlib.pyplot as plt

def visualize_map(map_size, obstacles, points):
    # 绘制地图边界
    plt.xlim(0, map_size)
    plt.ylim(0, map_size)

    # 绘制障碍物
    for obstacle in obstacles:
        x_values = [point[0] for point in obstacle]
        y_values = [point[1] for point in obstacle]
        plt.plot(x_values + [x_values[0]], y_values + [y_values[0]], color='red')  # 最后一个点与起点连线，形成封闭多边形

    # 绘制生成的点
    x_values = [point[0] for point in points]
    y_values = [point[1] for point in points]
    plt.scatter(x_values, y_values, color='blue',s=10)

    plt.show()

# 使用函数进行可视化
visualize_map(map_size, obstacles, points)

